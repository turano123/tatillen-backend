const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();

const app = express();
app.use(cors());
app.use(express.json());

// Upload klasÃ¶rÃ¼nÃ¼ public olarak sun
app.use('/uploads', express.static('uploads'));

// MongoDB baÄŸlantÄ±sÄ±
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('MongoDB baÄŸlantÄ±sÄ± baÅŸarÄ±lÄ±'))
  .catch((err) => console.error('MongoDB baÄŸlantÄ± hatasÄ±:', err));

// Schema tanÄ±mÄ± (dikkat: weekPrice deÄŸil weekdayPrice)
const roomSchema = new mongoose.Schema({
  name: String,
  weekdayPrice: Number,
  weekendPrice: Number,
  images: [String]
});

const Room = mongoose.model('Room', roomSchema);

// TÃ¼m odalarÄ± getir (gÃ¶rselleri tam URL ile dÃ¶ndÃ¼r)
app.get('/api/rooms', async (req, res) => {
  try {
    const rooms = await Room.find();

    const updatedRooms = rooms.map(room => ({
      ...room.toObject(),
      images: room.images.map(img => `${req.protocol}://${req.get('host')}/uploads/${img}`)
    }));

    res.json(updatedRooms);
  } catch (err) {
    console.error('Odalar yÃ¼klenirken hata:', err);
    res.status(500).json({ message: 'Sunucu hatasÄ±' });
  }
});

// Oda ekleme endpoint'i
app.post('/api/rooms', async (req, res) => {
  try {
    const newRoom = new Room(req.body);
    await newRoom.save();
    res.json({ message: 'Oda baÅŸarÄ±yla eklendi' });
  } catch (err) {
    console.error('Oda kaydedilirken hata:', err);
    res.status(500).json({ message: 'KayÄ±t hatasÄ±' });
  }
});

// Root endpoint (opsiyonel: test iÃ§in)
app.get('/', (req, res) => {
  res.send('Tatillen backend aktif ðŸŸ¢');
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Sunucu ${PORT} portunda Ã§alÄ±ÅŸÄ±yor`);
});
